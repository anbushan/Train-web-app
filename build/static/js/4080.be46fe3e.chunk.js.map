{"version":3,"file":"static/js/4080.be46fe3e.chunk.js","mappings":"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","sources":["components/BasicButton.js","components/TextInput.js","pages/Notification/General/GeneralValidation.js","pages/Notification/General/AddGeneralNotification.js"],"sourcesContent":["import React from \"react\";\nimport { Button, Spinner } from \"react-bootstrap\";\nconst BasicButton = (props) => {\n  const {\n    variant,\n    onClick,\n    label,\n    size,\n    icon,\n    className,\n    isLoading,\n    loaderVariant,\n    loaderSize,\n    type\n  } = props;\n  const buttonStyle = {\n    backgroundColor:\"#0077B2\",\n    borderColor: \"#0077B2\",\n    color:\"white\",\n  };\n  return (\n    <Button\n      style={buttonStyle}\n      variant={variant}\n      className={className}\n      size={size}\n      type={type}\n      onClick={onClick}\n      disabled={!isLoading ? false : true}\n    >\n      {!isLoading ? (\n        <>\n          {icon} {label}\n        </>\n      ) : (\n        <>\n          <Spinner\n            size={`${!loaderSize ? \"sm\" : loaderSize}`}\n            variant={`${!loaderVariant ? \"#0077B2\" : loaderVariant}`}\n          />\n        </>\n      )}\n    </Button>\n  );\n};\nexport default BasicButton;\n","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nconst TextInput = (props) => {\n  const {\n    label,\n    name,\n    id,\n    type,\n    placeholder,\n    htmlFor,\n    lableClassName,\n    value,\n    onChange,\n    onBlur,\n    disabled,\n    className,\n    lg,\n    md,\n    xxl,\n    xl,\n    sm,\n    validation,\n    star,\n  } = props;\n  return (\n    <Form.Group>\n      <Form.Label htmlFor={htmlFor} className={lableClassName}>\n        {label}\n        <span className={`text-danger ${star === \"none\" ? `d-${star}` : \"\"}`}>\n          *\n        </span>\n      </Form.Label>\n      <Form.Control\n        name={name}\n        id={id}\n        type={type}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        onBlur={onBlur}\n        disabled={disabled}\n        className={className}\n        lg={lg}\n        md={md}\n        xxl={xxl}\n        xl={xl}\n        sm={sm}\n      />\n      {validation}\n    </Form.Group>\n  );\n};\nexport default TextInput;\n","import * as Yup from \"yup\";\n\nexport const NotificationSchema = Yup.object().shape({\n    title:Yup.mixed().required(\" Title Must be Required..!\"),\n    body:Yup.mixed().required(\" Subtitle Must be Required..!\"),\n    image:Yup.mixed().required(\" Image Must be Required..!\"),\n   \n    \n});\n","import { Formik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { Col, Container, Form, Row } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AiOutlineArrowLeft } from \"react-icons/ai\";\nimport { NotificationSchema } from \".././../../pages/Notification/General/GeneralValidation\";\nimport BasicButton from \".././../../components/BasicButton\";\nimport TextInput from \".././../../components/TextInput\";\n\nimport { useAddNotificationMutation } from \"../../../redux/features/api/GeneralNotificationApi\";\nimport { toast } from \"react-toastify\";\n\nconst AddGeneralNotification = () => {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [NotificationAddData, { isLoading }] = useAddNotificationMutation();\n\n  const navigate = useNavigate();\n  const handleCancel = () => {\n    navigate(\"/admin/general\");\n  };\n\n  const initialValues = {\n    title: \"\",\n    body: \"\",\n    image: \"\",\n  };\n\n  const handleAddData = async () => {\n    try {\n      const response = await NotificationAddData ({\n        title: title,\n        body: body,\n        image:image,\n         \n      });\n      if (response?.data) {\n       \n        toast.success(response?.data?.message, { autoClose: 1000 });\n        setTitle(\"\");\n        setBody(\"\");\n        setImage(\"\");\n        navigate(\"/admin/general\");\n        console.log(response.error.data);\n        \n      } else {\n        toast.error(response?.error?.data.error, { autoClose: 1000 });\n        console.log(\"else part\");\n        console.log(response.error);\n      }\n    } catch (error) {\n      console.error(error);\n   \n    }\n  };\n\n  return (\n    <div>\n      <Container fluid>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={NotificationSchema}\n          onSubmit={handleAddData}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            isSubmitting,\n          }) => (\n            <>\n              <Form>\n                <Row className=\"d-flex flex-row justify-content-between align-items-center\">\n                  <Col className=\"d-flex justify-content-start mb-3 mt-3\">\n                    <h4 onClick={handleCancel}>\n                      <AiOutlineArrowLeft />\n                    </h4>\n                    <h4>Add General</h4>\n                  </Col>\n                  <Col className=\"d-sm-none d-none d-md-none d-lg-flex d-xxl-flex d-xl-flex flex-row justify-content-end align-items-center\">\n                    <BasicButton\n                      className=\"m-1\"\n                      variant=\"secondary\"\n                      onClick={handleCancel}\n                      label=\"Cancel\"\n                    />\n                    <BasicButton\n                      className=\"m-1\"\n                      label=\"Save\"\n                      type=\"button\"\n                      isLoading={isLoading}\n                      loaderVariant=\"info\"\n                      disabled={isSubmitting}\n                      onClick={\n                        title === ''||\n                        (body=== '')||\n                        image === ''||\n                        (touched.title && errors.title) ||\n                        (touched.body && errors.body) ||\n                        (touched.image && errors.image)\n                          ? handleSubmit\n                          : handleAddData\n                      }\n                    />\n                  </Col>\n                </Row>\n                <Row className=\"d-flex flex-wrap flex-lg-row flex-xxl-row flex-xl-row flex-column flex-md-column flex-sm-column  mt-4\">\n                  <Col className=\"m-1 p-4 d-flex flex-wrap flex-column shadow rounded\">\n                    <Col className=\"m-2\" lg=\"6\" xxl=\"6\" xl=\"12\" md=\"12\" sm=\"12\">\n                      <TextInput\n                        label=\"Title\"\n                        type=\"\"\n                        name=\"title\"\n                        className={`form-control ${\n                          touched.title && errors.title ? \"is-invalid\" : \"\"\n                        }`}\n                        onChange={(e) => {\n                          setTitle(e.target.value);\n                          handleChange(e);\n                        }}\n                        onBlur={handleBlur}\n                        validation={\n                          touched.title && errors.title ? (\n                            <p className=\"text-danger\">{errors.title}</p>\n                          ) : (\n                            \"\"\n                          )\n                        }\n                      />\n                    </Col>\n\n                    <Col className=\"m-2\" lg=\"6\" xxl=\"6\" xl=\"12\" md=\"12\" sm=\"12\">\n                      <TextInput\n                        label=\"body\"\n                        type=\"\"\n                        name=\"body\"\n                        className={`form-control ${\n                          touched.body && errors.body\n                            ? \"is-invalid\"\n                            : \"\"\n                        }`}\n                        onChange={(e) => {\n                          setBody(e.target.value);\n                          handleChange(e);\n                        }}\n                        onBlur={handleBlur}\n                        validation={\n                          touched.body && errors.body ? (\n                            <p className=\"text-danger\">{errors.body}</p>\n                          ) : (\n                            \"\"\n                          )\n                        }\n                      />\n                    </Col>\n                   \n                  </Col>\n                  <Col className=\"m-1 p-4 d-flex flex-wrap flex-column shadow rounded\">\n                  <Col className=\"m-2\" lg=\"6\" xxl=\"6\" xl=\"12\" md=\"12\" sm=\"12\">\n                      <TextInput\n                        label=\"Image\"\n                        type=\"file\" \n                        name=\"image\"\n                        className={`form-control ${\n                          touched.image && errors.image ? \"is-invalid\" : \"\"\n                        }`}\n                        onChange={(e) => {\n                          setImage(e.target.files[0]); \n                          handleChange(e);\n                        }}\n                        onBlur={handleBlur}\n                        validation={\n                          touched.image && errors.image ? (\n                            <p className=\"text-danger\">{errors.image}</p>\n                          ) : (\n                            \"\"\n                          )\n                        }\n                      />\n                    </Col>\n\n                  </Col>\n                </Row>\n                <Row className=\"d-sm-flex d-flex d-md-flex d-lg-none d-xxl-none d-xl-none flex-row justify-content-between align-items-center mt-3\">\n                  <Col className=\"d-flex justify-content-start align-items-center\">\n                    <BasicButton\n                      className=\"m-1\"\n                      variant=\"secondary\"\n                      onClick={handleCancel}\n                      label=\"Cancel\"\n                    />\n                  </Col>\n                  <Col className=\"d-flex justify-content-end align-items-center\">\n                    <BasicButton\n                      className=\"m-1\"\n                      label=\"Save\"\n                      type=\"button\"\n                      isLoading={isLoading}\n                      loaderVariant=\"info\"\n                      disabled={isSubmitting}\n                      onClick={\n                        title === ''||\n                        (body=== '')||\n                        image === ''||\n                        (touched.title && errors.title) ||\n                        (touched.body && errors.body) ||\n                        (touched.image && errors.image)\n                          ? handleSubmit\n                          : handleAddData\n                      }\n                    />\n                  </Col>\n                </Row>\n              </Form>\n            </>\n          )}\n        </Formik>\n      </Container>\n    </div>\n  );\n};\nexport default AddGeneralNotification;\n"],"names":["props","variant","onClick","label","size","icon","className","isLoading","loaderVariant","loaderSize","type","_jsx","Button","style","backgroundColor","borderColor","color","disabled","children","_Fragment","Spinner","concat","_jsxs","name","id","placeholder","htmlFor","lableClassName","value","onChange","onBlur","lg","md","xxl","xl","sm","validation","star","Form","Group","Label","Control","NotificationSchema","Yup","shape","title","required","body","image","AddGeneralNotification","setTitle","useState","setBody","setImage","NotificationAddData","useAddNotificationMutation","navigate","useNavigate","handleCancel","handleAddData","async","response","_response$data","_response$error","data","toast","success","message","autoClose","console","log","error","Container","fluid","Formik","initialValues","validationSchema","onSubmit","_ref","values","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","Row","Col","AiOutlineArrowLeft","BasicButton","TextInput","e","target","files"],"sourceRoot":""}